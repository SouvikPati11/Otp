// === BACKEND (server.js) === const express = require('express'); const bodyParser = require('body-parser'); const mongoose = require('mongoose'); const cors = require('cors'); const Razorpay = require('razorpay'); const fetch = require('node-fetch');

require('dotenv').config();

const app = express(); app.use(cors()); app.use(bodyParser.json());

// MongoDB setup mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });

const User = mongoose.model('User', new mongoose.Schema({ username: String, password: String, balance: { type: Number, default: 0 } }));

// Razorpay instance const razorpay = new Razorpay({ key_id: process.env.RAZORPAY_KEY, key_secret: process.env.RAZORPAY_SECRET });

// Register app.post('/api/register', async (req, res) => { const { username, password } = req.body; const user = new User({ username, password }); await user.save(); res.json({ success: true }); });

// Login app.post('/api/login', async (req, res) => { const { username, password } = req.body; const user = await User.findOne({ username, password }); if (!user) return res.status(401).json({ error: 'Invalid credentials' }); res.json({ success: true, user }); });

// Create Razorpay order app.post('/api/wallet/deposit', async (req, res) => { const { amount } = req.body; const options = { amount: amount * 100, currency: 'INR', receipt: 'otp_' + Date.now() }; const order = await razorpay.orders.create(options); res.json(order); });

// Verify payment and add balance (dummy endpoint) app.post('/api/wallet/verify', async (req, res) => { const { username, amount } = req.body; const user = await User.findOne({ username }); if (!user) return res.status(404).json({ error: 'User not found' }); user.balance += amount; await user.save(); res.json({ success: true, balance: user.balance }); });

// Fetch 5sim countries app.get('/api/otp/countries', async (req, res) => { const response = await fetch('https://5sim.net/v1/guest/countries'); const data = await response.json(); res.json(data); });

// Fetch 5sim services app.get('/api/otp/services', async (req, res) => { const response = await fetch('https://5sim.net/v1/guest/services'); const data = await response.json(); res.json(data); });

// Buy OTP (simulate with 5sim) app.post('/api/otp/buy', async (req, res) => { const { username, country, service } = req.body; const user = await User.findOne({ username }); if (!user || user.balance < 10) return res.status(400).json({ error: 'Insufficient balance' });

const response = await fetch(https://5sim.net/v1/user/buy/activation/${country}/${service}, { method: 'POST', headers: { Authorization: Bearer ${process.env.SIM_API_KEY} } }); const data = await response.json(); user.balance -= data.price || 10; await user.save(); res.json({ number: data.phone, id: data.id }); });

app.listen(3000, () => console.log('Server running on port 3000'));

// === FRONTEND (index.html) === /* Use basic HTML with forms for register/login, show balance, dropdowns for country/service, Razorpay button */

